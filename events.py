class Event:
    """this is a superclass for any events that might be generated by an
        object and sent to the EventManager
    """

    def __init__(self):
        self.name = "GenericEvent"


class TickEvent(Event):
    def __init__(self):
        super().__init__()
        self.name = "TickEvent"


class QuitEvent(Event):
    def __init__(self):
        super().__init__()
        self.name = "QuitEvent"


class EventManager:
    def __init__(self):
        from weakref import WeakKeyDictionary
        self.listeners = WeakKeyDictionary()

    def registerListener(self, event, listener):
        event_type = type(event)
        try:
            self.listeners[event_type].insert(listener)
        except KeyError:
            self.listeners[event_type] = [listener]

        # if self.listeners[event_type]:
        #     self.listeners[event_type].insert(listener)
        # else:
        #     self.listeners[event_type] = [listener]

    def unregister_listener(self, event, listener):
        event_type = type(event)
        if event_type in self.listeners.keys():
            del self.listeners[event_type][listener]

    def post(self, event):
        event_type = type(event)
        for listener in self.listeners[event_type]:
            listener.notify(event, event_manager=self)
